@using Microsoft.AspNetCore.Http.Extensions;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using WebTaskMaster.Models.Task;
@model WebTaskMaster.Models.Project.ProjectDetailsModel
@{
    var url = Context.Request.GetEncodedUrl();
}
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("task", ev.target.id);
    }

    function drop(ev) {     
        if (ev.target.id == "drop-0" || ev.target.id == "drop-1" || ev.target.id == "drop-2") {
            ev.preventDefault();
            
            var data = ev.dataTransfer.getData("task");

            switch (ev.target.id) {
                case "drop-0":
                    document.getElementById("newStatus-" + data).value = 0;
                    break;
                case "drop-1":
                    document.getElementById("newStatus-" + data).value = 1;
                    break;
                case "drop-2":
                    document.getElementById("newStatus-" + data).value = 2;
                    break;
                
            }
            
            var disabledElements = document.getElementsByClassName("disabled-" + data);
            for (var i = 0; i < disabledElements.length; i++) {
                disabledElements[i].removeAttribute("disabled");
            }
            ev.target.appendChild(document.getElementById("submit-" + data));
            document.getElementById("form-" + data).submit();
            
        }
        else {
            
        }
        
    }
    function submitForm(formId) {
        var form = document.getElementById(formId);
        form.submit();
    }
    function getSelectedTasks() {
        const checkboxes = document.querySelectorAll('.chckBox:checked');
        
        const checkedValues = Array.from(checkboxes).map(checkbox => checkbox.value);
        
        return checkedValues;
    }
    function moveTasks(){
        var listToMove = getSelectedTasks();
        document.getElementById("TasksIds").value = listToMove;
        document.getElementById("moveTasks").submit();
    }

    function setActiveLink(clickedLink) {
        
        $('.pagination .page-item').removeClass('active');

        
        $(clickedLink).parent().addClass('active');
    }
    
</script>

<ul class="pagination">
    @{
        string param = ViewContext.HttpContext.Request.Query["list"];
        var listQuantity = Model.Tasks.Count();
        var last = listQuantity - 1;
        for (int i = 0; i < listQuantity - 1; i++)
        {


            <li class="page-item "><a class="page-link" href="?list=@i" onclick="setActiveLink(this)">@Model.Tasks[i].TasksListName</a></li>
            

        }



        <li class="page-item "><a class="page-link" href="?list=@last" onclick="setActiveLink(this)">@Model.Tasks[last].TasksListName</a></li>


        <li class="page-item "><a class="page-link" href="?list=new" onclick="setActiveLink(this)">New</a></li>
    }       
</ul>
@{
    



    int intParam;
    if(param == "new")
    {
        intParam = -1;

    }
    else if(param is null || Int32.Parse(param) >= Model.Tasks.Count())
    {
        intParam = last;

    }
    else
    {
        intParam = Int32.Parse(param);
        if(intParam > last)
        {
            intParam = last;
        }

    }

    if(intParam >= 0)
    {
        
    <form asp-controller="Task" asp-action="MoveTasks" id="moveTasks">
            <input name="url" readonly style="display: none;" value="@url" />
                <label>Target List</label>
                <select name="DestinationId">
                @foreach (var taskList in Model.Tasks)
                {
                    if(taskList.TasksListName == Model.Tasks[intParam].TasksListName)
                    {
                        
                    }
                    else
                    {
                        <option style="background-color: #38609C" value="@taskList.Id">@taskList.TasksListName</option>
                    }                    
                }
                </select>
            
            <input type="hidden" name="TasksIds" id="TasksIds" />

            <button type="button" onclick="moveTasks()">Move</button>
    </form>
        
        <form asp-controller="Task" asp-action="DeleteTasksList">
            <input type="hidden" name="listId" value="@Model.Tasks[intParam].Id" />
            <input name="url" readonly style="display: none;" value="@url" />
            <button type="submit">delete list</button>
    </form>
    <div class="container text-center">
                    <div class="row ">
                        <div class="col" id="drop-0" ondrop="drop(event)" ondragover="allowDrop(event)">
                            To Do
                            @await Component.InvokeAsync("NewTask", new {tasksListId = Model.Tasks[intParam].Id}) 

                            @await Component.InvokeAsync("TasksRow", new {list = Model.Tasks[intParam],statusId = 0,teamId = Model.ProjectTeam.Id})            
                        </div>
                        <div class="col" id="drop-1" ondrop="drop(event)" ondragover="allowDrop(event)">
                            In Progress
                            @await Component.InvokeAsync("TasksRow", new {list = Model.Tasks[intParam],statusId = 1,teamId = Model.ProjectTeam.Id})
                        </div>
                        <div class="col" id="drop-2" ondrop="drop(event)" ondragover="allowDrop(event)">
                            Done
                            @await Component.InvokeAsync("TasksRow", new {list = Model.Tasks[intParam],statusId = 2,teamId = Model.ProjectTeam.Id})
                        </div>
                    </div>
    </div>
            
    
    }
    else
    {
    <a>nowa lista</a>
    <partial name="_NewTasksList" model="new NewTasksListModel()
        {
            ProjectId = Model.Id
        }"/>
    }

}

