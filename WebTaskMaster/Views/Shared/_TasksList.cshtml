@model WebTaskMaster.Models.Project.ProjectDetailsModel
<script>
    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("task", ev.target.id);
    }

    function drop(ev) {     
        if (ev.target.id == "drop-0" || ev.target.id == "drop-1" || ev.target.id == "drop-2") {
            ev.preventDefault();
            
            var data = ev.dataTransfer.getData("task");

            switch (ev.target.id) {
                case "drop-0":
                    document.getElementById("newStatus-" + data).value = 0;
                    break;
                case "drop-1":
                    document.getElementById("newStatus-" + data).value = 1;
                    break;
                case "drop-2":
                    document.getElementById("newStatus-" + data).value = 2;
                    break;
                
            }
            
            var disabledElements = document.getElementsByClassName("disabled-" + data);
            for (var i = 0; i < disabledElements.length; i++) {
                disabledElements[i].removeAttribute("disabled");
            }
            ev.target.appendChild(document.getElementById("submit-" + data));
            document.getElementById("form-" + data).submit();
            
        }
        else {
            
        }
        
    }
</script>

<ul class="pagination">
    @{
        var listQuantity = Model.Tasks.Count();
        var last = listQuantity - 1;
        for (int i = 0; i < listQuantity - 1; i++)
        {
            <li class="page-item"><a class="page-link" href="#@i">@Model.Tasks[i].TasksListName</a></li>
        }
        <li class="page-item active"><a class="page-link" href="#@last">@Model.Tasks[last].TasksListName</a></li>
        <li class="page-item"><a class="page-link" href="#">New</a></li>
    }       
</ul>

<div class="container text-center">
    <div class="row ">
        <div class="col" id="drop-0" ondrop="drop(event)" ondragover="allowDrop(event)">
            To Do
            @await Component.InvokeAsync("TasksRow", new {list = Model.Tasks[0],statusId = 0,teamId = Model.ProjectTeam.Id})

            @await Component.InvokeAsync("NewTask", new {tasksListId = Model.Tasks[0].Id})
        </div>
        <div class="col" id="drop-1" ondrop="drop(event)" ondragover="allowDrop(event)">
            In Progress
            @await Component.InvokeAsync("TasksRow", new {list = Model.Tasks[0],statusId = 1,teamId = Model.ProjectTeam.Id})
        </div>
        <div class="col" id="drop-2" ondrop="drop(event)" ondragover="allowDrop(event)">
            Done
            @await Component.InvokeAsync("TasksRow", new {list = Model.Tasks[0],statusId = 2,teamId = Model.ProjectTeam.Id})
        </div>
    </div>
</div>
